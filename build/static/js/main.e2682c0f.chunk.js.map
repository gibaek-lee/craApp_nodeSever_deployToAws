{"version":3,"sources":["components/WholeWrapper/WholeWrapper.js","components/ProblemResultWrapper/ProblemResultWrapper.js","components/ProblemList/ProblemList.js","components/ProblemBox/ProblemBox.js","components/Problem/Problem.js","components/Answer/Answer.js","components/CheckBox/CheckBox.js","components/TextBox/TextBox.js","components/ResultList/ResultList.js","components/Result/Result.js","components/SubmitForm/SubmitForm.js","containers/ProblemsContainer/ProblemsContainer.js","services/get.js","services/post.js","App.js","serviceWorker.js","index.js"],"names":["WholeWrapper","_ref","children","react_default","a","createElement","className","ProblemResultWrapper","problems","makeInput","results","didSubmit","gotResult","components_ProblemList_ProblemList","components_ResultList_ResultList","ProblemList","mapProblems","map","problem","index","components_ProblemBox_ProblemBox","key","ProblemBox","id","type","problem_text","choices","components_Problem_Problem","text","components_Answer_Answer","Problem","Answer","choicesArray","JSON","parse","mapChoices","mapChoicesAnswer","choice","components_CheckBox_CheckBox","result","components_TextBox_TextBox","CheckBox","handleChange","_this$props","_this","props","_this$props2","this","name","onChange","Component","TextBox","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","value","target","state","prevProps","prevState","ResultList","mapResults","element","components_Result_Result","Result","SubmitForm","disabled","handleSubmit","preventDefault","postAnswer","didSubmitAtForm","console","log","onSubmit","ProblemsContainer","getProblemsData","asyncToGenerator","regenerator_default","mark","_callee","problemData","wrap","_context","prev","next","getting","axios","get","sent","data","t0","concat","stop","_callee2","resultData","_context2","input","stringify","method","url","baseURL","headers","X-Requested-With","Content-Type","withCredentials","proxy","host","port","answer","foundIndex","findIndex","toConsumableArray","slice","length","bool","_this$state","components_WholeWrapper_WholeWrapper","components_ProblemResultWrapper_ProblemResultWrapper","components_SubmitForm_SubmitForm","App","containers_ProblemsContainer_ProblemsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2682c0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './WholeWrapper.css';\r\n\r\nconst WholeWrapper = ({ children }) => (\r\n  <div className=\"WholeWrapper\">\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default WholeWrapper;\r\n","import React from 'react';\r\nimport './ProblemResultWrapper.css';\r\nimport { ProblemList, ResultList } from '../'\r\n\r\nconst ProblemResultWrapper = ({ problems, makeInput, results, didSubmit, gotResult }) => (\r\n  <div className=\"ProblemResultWrapper\">\r\n    <ProblemList\r\n      problems={problems}\r\n      makeInput={makeInput}\r\n      didSubmit={didSubmit}\r\n      results={results}\r\n    />\r\n    <ResultList\r\n      results={results}\r\n      gotResult={gotResult}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default ProblemResultWrapper;\r\n","import React from 'react';\r\nimport './ProblemList.css';\r\nimport { ProblemBox } from '../'\r\n\r\nconst ProblemList = ({ problems, makeInput, didSubmit, results }) => {\r\n  const mapProblems = problems.map(\r\n    (problem, index) => (\r\n      <ProblemBox\r\n        problem={problem}\r\n        makeInput={makeInput}\r\n        didSubmit={didSubmit}\r\n        results={results}\r\n        key={index}\r\n      />\r\n    )\r\n  );\r\n  return (\r\n    <ul className=\"ProblemList\">\r\n      {mapProblems}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ProblemList;\r\n","import React from 'react';\r\nimport './ProblemBox.css';\r\nimport { Problem, Answer } from '../';\r\n\r\nconst ProblemBox = ({ problem, makeInput, didSubmit, results, index }) => {\r\n  const { id, type, problem_text, choices } = problem;\r\n  return (\r\n    <div  className=\"ProblemBox\">\r\n      <Problem\r\n        id={id}\r\n        text={problem_text}\r\n      />\r\n      <Answer\r\n        id={id}\r\n        type={type}\r\n        choices={choices}\r\n        results={results}\r\n        makeInput={makeInput}\r\n        didSubmit={didSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default ProblemBox;\r\n","import React from 'react';\r\nimport './Problem.css';\r\n\r\nconst Problem = ({ id, text }) => (\r\n  <div className=\"Problem\">\r\n    {id}. {text}\r\n  </div>\r\n)\r\n\r\nexport default Problem;\r\n","import React from 'react';\r\nimport './Answer.css';\r\nimport { CheckBox, TextBox } from '../'\r\n\r\nconst Answer = ({ id, type, choices, makeInput, didSubmit, results }) => {\r\n  if(type === 1 && choices) {\r\n    const choicesArray = JSON.parse(choices);\r\n    let mapChoices = [];\r\n    let mapChoicesAnswer = [];\r\n    if(choicesArray) {\r\n      mapChoices = choicesArray.map(\r\n        (choice, index) => (\r\n          <CheckBox\r\n            id={id}\r\n            choice={choice}\r\n            makeInput={makeInput}\r\n            didSubmit={didSubmit}\r\n            key={index}\r\n          />\r\n        )\r\n      );\r\n      if(didSubmit) {\r\n        mapChoicesAnswer = choicesArray.map(\r\n          (choice, index) => (\r\n            <CheckBox\r\n              id={id}\r\n              choice={choice}\r\n              result={results[id]}\r\n              didSubmit={didSubmit}\r\n              key={index}\r\n            />\r\n          )\r\n        );\r\n      }\r\n    }\r\n    if(didSubmit) {\r\n      return (\r\n        <div>\r\n          <form className=\"Answer\">\r\n            나의 답: {mapChoices}\r\n          </form>\r\n          <form className=\"Answer\">\r\n            정답: {mapChoicesAnswer}\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <form className=\"Answer\">\r\n        {mapChoices}\r\n      </form>\r\n    )\r\n  }\r\n  if(didSubmit) {\r\n    return (\r\n      <div>\r\n        나의 답: <TextBox\r\n          id={id}\r\n          makeInput={makeInput}\r\n        />\r\n        정답: <TextBox\r\n          id={id}\r\n          makeInput={makeInput}\r\n          result={results[id]}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <TextBox\r\n      id={id}\r\n      makeInput={makeInput}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Answer;\r\n","import React, { Component } from 'react';\r\nimport './CheckBox.css';\r\n\r\nclass CheckBox extends Component {\r\n  handleChange = () => {\r\n    const { id, choice, makeInput } = this.props;\r\n    makeInput(id, choice);\r\n  }\r\n  render () {\r\n    const { choice, id, didSubmit, result, index } = this.props;\r\n\r\n    if(didSubmit) {\r\n      /*\r\n      axios.post가 성공해서 results 받으면 checked된 박스를 보일 수 있다.\r\n      if(Number(result.answer) === index) {\r\n        return (\r\n          <div className=\"CheckBox\">\r\n            <input\r\n              type=\"radio\"\r\n              id={id}\r\n              name=\"CheckBox\"\r\n              checked\r\n            />{choice}\r\n          </div>\r\n        )\r\n      }\r\n      */\r\n      return (\r\n        <div className=\"CheckBox\">\r\n          <input\r\n            type=\"radio\"\r\n            id={id}\r\n            name=\"CheckBox\"\r\n          />{choice}\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"CheckBox\">\r\n        <input\r\n          type=\"radio\"\r\n          id={id}\r\n          name=\"CheckBox\"\r\n          onChange={this.handleChange}\r\n        />{choice}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CheckBox;\r\n","import React, { Component} from 'react';\r\nimport './TextBox.css';\r\n\r\nclass TextBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: '' }\r\n  }\r\n  componentDidUpdate(prevProps, prevState){\r\n    /*\r\n    makeInput()을 handleChange에서 실행시키면 실제 DOM 변화가 일어나기 전에\r\n    onChange 이벤트가 발생해서 state 업데이트가 이루어지지 않은 채로 makeInput()이\r\n    실행되어 현재 입력값이 들어가지 않고 이전 입력값까지 들어가게 되는 오류가 발생함.\r\n    그러므로 실제 DOM 변화 후의 LifeCycle인 componentDidUpdate에서 실행시켜 줘야함.\r\n    */\r\n    const { id, makeInput } = this.props;\r\n    const { value } = this.state;\r\n    if(prevState.value !== value){//이 조건이 없으면 makeInput()이 무한루프 된다.\r\n      makeInput(id, this.state.value);\r\n    }\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  }\r\n  render () {\r\n    const { value } = this.state;\r\n    return (\r\n      <div className=\"TextBox\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"TextBox\"\r\n          value={value}\r\n          /*method(param)이 onChange에 전달되면 무한루프. 그러므로 ()=>method(param)을 전달해야 한다.*/\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport './ResultList.css';\r\nimport { Result } from '../';\r\n\r\nconst ResultList = ({ results, gotResult }) => {\r\n  if(gotResult) {\r\n    const mapResults = results.map(\r\n      (element, index) => (\r\n        <Result\r\n          id={element.id}\r\n          result={element.result}\r\n          key={index}\r\n        />\r\n      )\r\n    );\r\n    return (\r\n      <ul className=\"ResultList\">\r\n        {mapResults}\r\n      </ul>\r\n    )\r\n  }\r\n  return (\r\n    <ul className=\"ResultList\">\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ResultList;\r\n","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = ({ id, result }) => (\r\n  <div className=\"Result\">\r\n    {id}. {result}\r\n  </div>\r\n)\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\nimport './SubmitForm.css';\r\n\r\nclass SubmitForm extends Component {\r\n  state = { disabled: false }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.postAnswer();\r\n    this.props.didSubmitAtForm(true);\r\n    this.setState({ disabled: true });\r\n    console.log(\"Submit button disabled, answer submitted\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"SubmitForm\"\r\n        onSubmit={this.handleSubmit}\r\n      >\r\n        <button\r\n          type=\"submit\"\r\n          disabled={this.state.disabled}\r\n        >\r\n        제출\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubmitForm;\r\n","import React, { Component } from 'react';\r\nimport { WholeWrapper, ProblemResultWrapper, SubmitForm } from '../../components';\r\n//import * as service from '../../services/get';\r\nimport * as services from '../../services';\r\n\r\nclass ProblemsContainer extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      getting: false,\r\n      problems: [\r\n        {\r\n          id: 1,\r\n          problem_text: '',\r\n          type: 0,\r\n          choices: \"[]\"\r\n        }\r\n      ],\r\n      input: [\r\n        {\r\n          id: 1,\r\n          answer: \"\"\r\n        }\r\n      ],\r\n      results: [\r\n        {\r\n          id: 1,\r\n          result: false,\r\n          answer: \"2\"\r\n        }\r\n      ],\r\n      didSubmit: false,\r\n      gotResult: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getProblemsData();\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if(prevState.input !== this.state.input) {//조건이 빈약해서 작동하지 않고있음\r\n      console.log('Current input state');\r\n      console.log(this.state.input);\r\n    }\r\n  }\r\n\r\n  getProblemsData = async () => {\r\n    this.setState({\r\n      getting: true //requesting\r\n    });\r\n    try {\r\n      const problemData = await services.getData();\r\n      this.setState({\r\n        getting: false,//requesting done\r\n        problems: problemData.data.problems\r\n      });\r\n      console.log(\"Success to get problemData\");\r\n      console.log(problemData);\r\n    } catch(error) {\r\n      this.setState({\r\n        getting: false\r\n      });\r\n      console.log(`get error occured, ${error}`);\r\n    }\r\n  }\r\n\r\n  postAnswer = async () => { //try-catch 사용 안하고 post.js에 axios.post().then().catch()로 사용\r\n    this.setState({\r\n      getting: true, //requesting\r\n    });\r\n    const resultData = await services.postData(JSON.stringify(this.state.input));\r\n    if(!resultData) { //prevent cannot read property 'map' of undefined\r\n      this.setState({\r\n        getting: false,//requesting done\r\n        results: [\r\n          {\r\n            id: 1,\r\n            result: false,\r\n            answer: \"\"\r\n          }\r\n        ]\r\n      });\r\n    } else { //get response success\r\n      this.setState({\r\n        getting: false,//requesting done\r\n        results: resultData,\r\n        gotResult: true\r\n      });\r\n    }\r\n  }\r\n\r\n  makeInput = (id, answer) => {//사용자 정답 추출하기\r\n    const { input } = this.state;\r\n    const foundIndex = input.findIndex((element) => {\r\n      return element.id === id\r\n    });\r\n    if(foundIndex < 0) {//만일 id 없으면 맨 뒤에 추가하고\r\n      this.setState({\r\n        input: [\r\n          ...input,\r\n          {\r\n            id,\r\n            answer\r\n          }\r\n        ]\r\n      });\r\n      console.log('input success: answer added');\r\n    }\r\n    if(foundIndex >= 0) {//id 있으면 수정하기\r\n      this.setState({\r\n        input: [\r\n          ...input.slice(0,foundIndex),\r\n          {\r\n            id,\r\n            answer\r\n          },\r\n          ...input.slice(foundIndex+1,input.length)\r\n        ]\r\n      });\r\n      console.log('input success: answer modified');\r\n    }\r\n  }\r\n  didSubmitAtForm = (bool) => {\r\n    this.setState({\r\n      didSubmit: bool\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { problems, results, gotResult, didSubmit } = this.state;\r\n    return (\r\n      <WholeWrapper>\r\n          <ProblemResultWrapper\r\n            problems={problems}\r\n            makeInput={this.makeInput}\r\n            results={results}\r\n            didSubmit={didSubmit}\r\n            gotResult={gotResult}\r\n          />\r\n          <SubmitForm\r\n            postAnswer={this.postAnswer}\r\n            didSubmitAtForm={this.didSubmitAtForm}\r\n          />\r\n      </WholeWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProblemsContainer;\r\n","import axios from 'axios';\r\n\r\nexport default function getData() {\r\n  return axios.get('/api/fetchProblem');\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default function postData(input) {\r\n  /*const config = {\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    }\r\n  };\r\n  return axios.post('/api/submit', input, config)\r\n  .then(function (response) {\r\n    console.log(\"Success to get results\");\r\n    console.log(response);\r\n    return response;\r\n   })\r\n   .catch(function (error) {\r\n     console.log(error);\r\n   });*/\r\n  return axios({\r\n    method: 'post',\r\n    url: '/api/submit',\r\n    baseURL: 'http://localhost:3000/',\r\n    headers: {\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    },\r\n    data: input,\r\n    withCredentials: true,\r\n    proxy: {\r\n      host: '127.0.0.1',\r\n      port: 3000\r\n    }\r\n  })\r\n}\r\n","import React, { Component } from 'react';\nimport { ProblemsContainer } from './containers';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ProblemsContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}